openapi: 3.0.0
info:
  title: WASAText API
  description: API for the WASAText messaging platform.
  version: 1.0.0

tags:
  - name: User
    description: Operations related to user management
  - name: Conversations
    description: Operations related to conversations
  - name: Messages
    description: Operations related to messages
  - name: Groups
    description: Operations related to groups

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      description: User details.
      properties:
        id:
          type: string
          description: Unique user identifier.
          example: "abcdef012345"
        name:
          type: string
          description: Username.
          pattern: "^[a-zA-Z0-9_-]{3,16}$"
          minLength: 3
          maxLength: 16
          example: "Maria"
    Conversation:
      type: object
      description: Details of a conversation.
      properties:
        id:
          type: string
          description: Unique conversation identifier.
          example: "conversation123"
        name:
          type: string
          description: Name of the conversation.
          minLength: 1
          maxLength: 255
          example: "Group Chat"
        lastMessage:
          type: string
          description: Last message preview.
          maxLength: 100
          example: "Hey, how are you?"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the last message.
          example: "2023-11-19T14:48:00.000Z"

    Message:
      type: object
      description: Details of a message.
      properties:
        id:
          type: string
          description: Unique message identifier.
          example: "message123"
        sender:
          type: string
          description: Sender's username.
          minLength: 1
          maxLength: 16
          example: "John"
        content:
          type: string
          description: Message content.
          maxLength: 500
          example: "Hello there!"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the message.
          example: "2023-11-19T14:48:00.000Z"
   
paths:
  /session:
    post:
      tags:
        - User
      summary: Logs in the user
      operationId: doLogin
      security: [] # no authentication required for login
      description: >
        If the user does not exist, it will be created. If the user exists, the user identifier is returned.
      requestBody:
        description: User Login details
        required: true
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/User"
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /users/me/name:
    put:
      tags:
        - User
      summary: Update user name
      description: Update the username of the currently logged-in user
      operationId: setMyUserName
      requestBody:
        description: New username
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New username.
                  pattern: "^[a-zA-Z0-9_-]{3,16}$"
                  minLength: 3
                  maxLength: 16
                  example: "new_username"
      responses:
        '200':
          description: Name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining the issue.
                    example: "The username is already taken."

  /users/me/photo:
    put:
      tags:
        - User
      summary: Update profile photo
      description: Allows the user to upload or change their profile photo
      operationId: setMyPhoto
      requestBody:
        description: Profile photo upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /conversations:
    get:
      tags:
        - Conversations
      summary: Retrieve all conversations
      description: Fetch a list of all user conversations
      operationId: getMyConversations
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"

  /conversations/{id}:
    get:
      tags:
        - Conversations
      summary: Retrieve messages in a conversation
      description: Fetch details of a specific conversation by its ID
      operationId: getConversation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Conversation ID
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

  /messages:
    post:
      tags:
        - Messages
      summary: Send a new message
      description: Send a message to a conversation
      operationId: sendMessage
      requestBody:
        description: Message details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  type: string
                  description: Conversation ID where the message will be sent.
                  example: "conversation123"
                content:
                  type: string
                  description: Content of the message.
                  maxLength: 500
                  example: "Hello!"
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /messages/{id}/forward:
    post:
      tags:
        - Messages
      summary: Forward a message
      description: Allows a user to forward a message to another conversation
      operationId: forwardMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Message ID to forward
      requestBody:
        description: Forwarding details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                toConversationId:
                  type: string
                  description: The ID of the conversation to forward the message to
                  example: "conversation456"
      responses:
        '201':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /messages/{id}/comment:
    post:
      tags:
        - Messages
      summary: React to a message
      description: Allows an user to react to a message
      operationId: commentMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Message ID to react to
      requestBody:
        description: Reaction details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  type: string
                  example: "üëç"
      responses:
        '201':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
    delete:
      tags:
        - Messages
      summary: Remove a reaction
      description: Allows an user to remove a reaction
      operationId: uncommentMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Message ID to remove reaction from
      responses:
        '200':
          description: Reaction removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /groups/{id}/leave:
    post:
      tags:
        - Groups
      summary: Leave a group
      description: Allows an user to leave to a group
      operationId: leaveGroup
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Group ID to leave
      responses:
        '200':
          description: Left group successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /groups/{id}/photo:
    put:
      tags:
        - Groups
      summary: Update group photo
      description: Allows an admin to upload or update the group's photo
      operationId: setGroupPhoto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Group ID
      requestBody:
        description: Group photo upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
